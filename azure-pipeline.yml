trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  client_id: $(client_id)  # Reference to the variable created in Azure DevOps
  client_secret: $(client_secret)
  tenant_id: $(tenant_id)
  subscription_id: $(subscription_id)
  terraform_version: '1.3.0'  # Set the Terraform version you need

steps:
# Install Terraform on the build agent
- task: TerraformInstaller@0
  inputs:
    terraformVersion: $(terraform_version)

# Set up the Azure service principal authentication for Terraform
- task: AzureCLI@2
  displayName: 'Azure CLI: Service Principal Authentication'
  inputs:
    azureSubscription: '<YOUR-AZURE-SUBSCRIPTION-NAME>'  # Azure subscription connection from Service Connections
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Setting up Terraform authentication..."
      export ARM_CLIENT_ID=$(client_id)
      export ARM_CLIENT_SECRET=$(client_secret)
      export ARM_TENANT_ID=$(tenant_id)
      export ARM_SUBSCRIPTION_ID=$(subscription_id)
    failOnStandardError: true

# Initialize Terraform working directory
- script: |
    terraform init
  displayName: 'Terraform Init'

# Validate Terraform configuration
- script: |
    terraform validate
  displayName: 'Terraform Validate'

# Run terraform plan to preview the changes
- script: |
    terraform plan -out=tfplan
  displayName: 'Terraform Plan'

# Apply the Terraform plan to create resources
- script: |
    terraform apply -auto-approve tfplan
  displayName: 'Terraform Apply'

# Output Terraform state or any output variables
- script: |
    terraform output
  displayName: 'Terraform Output'
